
        var xml3ds = injectXml3d();

        renderI = xml3ds[0].getRenderInterface();
        forwardPipeline = renderI.getRenderPipeline();

        forwardPipelineContext = forwardPipeline.context;

        var gl = forwardPipelineContext.gl;

        XML3D.webgl.FullscreenQuad(gl);

        var canvasSize = new Float32Array([forwardPipelineContext.canvasTarget.width, forwardPipelineContext.canvasTarget.height]);
        var textureBuffer = new Uint8Array(forwardPipelineContext.canvasTarget.width * forwardPipelineContext.canvasTarget.height * 4);

        var shader = forwardPipeline.context.programFactory.getProgramByName("grayscale");
        forwardPipeline.addShader("blitShader", shader);

        var target = forwardPipeline.getRenderTarget();
        console.log(target);
      //  target.bind();
        gl.clear(gl.DEPTH_BUFFER_BIT || gl.COLOR_BUFFER_BIT);

        var program = forwardPipeline.getShader("blitShader");

        program.bind();

        var sourceTex = forwardPipeline.getRenderTarget(image);

        program.setUniformVariables({ inputTexture: image, canvasSize: canvasSize});

        console.log(gl.FullscreenQuad);
        gl.FullscreenQuad.draw(program);

        program.unbind();

         // Reading pixels from framebuffer
        var pixels = new Uint8Array(512 * 512 * 4);
        gl.readPixels( 0, 0, 512, 512, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

        var pixelsData = new Uint8ClampedArray(pixels);

        canvasImg = document.getElementById("debug");
        var canvasImgCtx = canvasImg.getContext("2d");

        var imageData = canvasImgCtx.createImageData(512, 512);
        imageData.data.set(pixelsData);
        canvasImgCtx.putImageData(imageData, 0, 0);